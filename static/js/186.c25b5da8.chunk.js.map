{"version":3,"file":"static/js/186.c25b5da8.chunk.js","mappings":"iRAMe,SAASA,IACpB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KAuBA,OArBAC,EAAAA,EAAAA,YAAU,WAAM,wCACZ,oGAGQH,GAAW,GACXE,GAAS,GAJjB,UAMiCE,EAAAA,EAAAA,IAAkBV,GANnD,OAMcW,EANd,OAOQP,EAAWO,GAPnB,gDAUQH,GAAS,GAVjB,yBAYQF,GAAW,GAZnB,qFADY,uBAAC,WAAD,wBAiBZM,EAEH,GAAE,CAACZ,KAGA,gCACKK,IAAW,SAAC,IAAD,IACXE,IAAS,SAAC,IAAD,KAEV,wBACKJ,EAAQU,KAAI,SAAAC,GAAI,OACb,2BACI,0BAAI,UAAQA,EAAKC,WACjB,uBAAID,EAAKE,YAFJF,EAAKG,GADD,QAShC,C,+LC9CDC,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAM,mCAGCC,EAAmB,mCAAG,oGACRF,EAAAA,EAAAA,IAAA,oCAAuCC,IAD/B,cACzBE,EADyB,yBAExBA,EAASC,MAFe,2CAAH,qDAKnBC,EAAc,mCAAG,WAAOvB,GAAP,uFACHkB,EAAAA,EAAAA,IAAA,gBAAmBlB,EAAnB,oBAAsCmB,IADnC,cACpBE,EADoB,yBAEnBA,EAASC,MAFU,2CAAH,sDAKdE,EAAiB,mCAAG,WAAOC,GAAP,uFACNP,EAAAA,EAAAA,IAAA,+BAAkCC,EAAlC,kBAA+CM,IADzC,cACvBJ,EADuB,yBAEtBA,EAASC,KAAKI,SAFQ,2CAAH,sDAKjBC,EAAiB,mCAAG,WAAO3B,GAAP,uFACNkB,EAAAA,EAAAA,IAAA,gBAAmBlB,EAAnB,4BAA8CmB,IADxC,cACvBE,EADuB,yBAEtBA,EAASC,KAAKM,MAFQ,2CAAH,sDAKjBlB,EAAiB,mCAAG,WAAOV,GAAP,uFACNkB,EAAAA,EAAAA,IAAA,gBAAmBlB,EAAnB,oCAAsDmB,IADhD,cACvBE,EADuB,yBAEtBA,EAASC,KAAKI,SAFQ,2CAAH,qD","sources":["components/Reviews/Reviews.jsx","moviesAPI.js"],"sourcesContent":["import { Loader } from \"components/Loader/Loader\";\nimport { NotFound } from \"components/NotFound/NotFound\";\nimport { fetchMovieReviews } from \"moviesAPI\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nexport default function Reviews() {\n    const { movieID } = useParams();\n    const [reviews, setReviews] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(false);\n\n    useEffect(() => {\n        async function getReviews() {\n            try {\n\n                setLoading(true);\n                setError(false);\n\n                const allReviews = await fetchMovieReviews(movieID);\n                setReviews(allReviews);\n\n            } catch (error) {\n                setError(true);\n            } finally {\n                setLoading(false);\n            };\n        };\n\n        getReviews();\n\n    }, [movieID]);\n\n    return (\n        <>\n            {loading && <Loader />}\n            {error && <NotFound />}\n            \n            <ul>\n                {reviews.map(item => (\n                    <li key={item.id}>\n                        <h3>Autor: {item.author}</h3>\n                        <p>{item.content}</p>\n                    </li>\n                ))}\n            </ul>\n        </>\n    );\n};","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst KEY = \"fc9b2ba3c1d7d66208afaa93dbd87a11\";\n\n\nexport const fetchTrendingMovies = async () => {\n    const responce = await axios.get(`trending/all/week?api_key=${KEY}`);\n    return responce.data;\n};\n\nexport const fetchMovieByID = async (movieID) => {\n    const responce = await axios.get(`movie/${movieID}?api_key=${KEY}`);\n    return responce.data;\n};\n\nexport const fetchSearchMovies = async (query) => {\n    const responce = await axios.get(`search/movie?api_key=${KEY}&query=${query}`);\n    return responce.data.results;\n};\n\nexport const fetchMovieCredits = async (movieID) => {\n    const responce = await axios.get(`movie/${movieID}/credits?api_key=${KEY}`);\n    return responce.data.cast;\n};\n\nexport const fetchMovieReviews = async (movieID) => {\n    const responce = await axios.get(`movie/${movieID}/reviews?&page=1&api_key=${KEY}`);\n    return responce.data.results;\n};"],"names":["Reviews","movieID","useParams","useState","reviews","setReviews","loading","setLoading","error","setError","useEffect","fetchMovieReviews","allReviews","getReviews","map","item","author","content","id","axios","KEY","fetchTrendingMovies","responce","data","fetchMovieByID","fetchSearchMovies","query","results","fetchMovieCredits","cast"],"sourceRoot":""}